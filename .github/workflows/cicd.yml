name: CI-CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  TF_WORKING_DIR: deploy/tf
  IMAGE_REPO: azure-app

jobs:
  infra:
    name: Provision/Update Infra (Terraform)
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Apply (base infra)
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_mysql_admin_password: ${{ secrets.MYSQL_ADMIN_PASSWORD }}
        run: |
          terraform apply -auto-approve \
            -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var "name_prefix=${{ vars.NAME_PREFIX }}" \
            -var "environment=${{ vars.ENVIRONMENT }}" \
            -var "resource_group_name=${{ vars.RESOURCE_GROUP_NAME }}" \
            -var "location=${{ vars.AZURE_LOCATION }}" \
            -var "storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }}" \
            -var "cosmosdb_account_name=${{ vars.COSMOS_ACCOUNT_NAME }}" \
            -var "acr_name=${{ vars.ACR_NAME }}" \
            -var "container_app_name=${{ vars.CONTAINER_APP_NAME }}" \
            -var "mysql_database_name=${{ vars.MYSQL_DATABASE_NAME }}" \
            -var "private_domain_name=${{ vars.PRIVATE_DOMAIN_NAME }}" \
            -var "enable_vpn=${{ vars.ENABLE_VPN }}" \
            -var "p2s_root_cert_public_data=${{ secrets.P2S_ROOT_CERT_PUBLIC_DATA }}"

  build_and_push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: infra
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '22'

      - name: Docker login to ACR
        run: |
          az acr login --name ${{ vars.ACR_NAME }}

      - name: Build and push
        working-directory: .
        env:
          ACR_LOGIN_SERVER: ${{ vars.ACR_NAME }}.azurecr.io
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg MODULE=azure-app -f Dockerfile -t $ACR_LOGIN_SERVER/${{ env.IMAGE_REPO }}:$IMAGE_TAG -t $ACR_LOGIN_SERVER/${{ env.IMAGE_REPO }}:latest .
          docker push $ACR_LOGIN_SERVER/${{ env.IMAGE_REPO }}:$IMAGE_TAG
          docker push $ACR_LOGIN_SERVER/${{ env.IMAGE_REPO }}:latest

      - name: Expose image tag
        id: meta
        run: echo "tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT

    outputs:
      image_tag: ${{ steps.meta.outputs.tag }}

  deploy_app:
    name: Deploy App (Terraform with new image)
    runs-on: ubuntu-latest
    needs: build_and_push
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Apply (update image)
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_mysql_admin_password: ${{ secrets.MYSQL_ADMIN_PASSWORD }}
        run: |
          terraform apply -auto-approve \
            -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var "name_prefix=${{ vars.NAME_PREFIX }}" \
            -var "environment=${{ vars.ENVIRONMENT }}" \
            -var "resource_group_name=${{ vars.RESOURCE_GROUP_NAME }}" \
            -var "location=${{ vars.AZURE_LOCATION }}" \
            -var "storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }}" \
            -var "cosmosdb_account_name=${{ vars.COSMOS_ACCOUNT_NAME }}" \
            -var "acr_name=${{ vars.ACR_NAME }}" \
            -var "container_app_name=${{ vars.CONTAINER_APP_NAME }}" \
            -var "mysql_database_name=${{ vars.MYSQL_DATABASE_NAME }}" \
            -var "private_domain_name=${{ vars.PRIVATE_DOMAIN_NAME }}" \
            -var "enable_vpn=${{ vars.ENABLE_VPN }}" \
            -var "p2s_root_cert_public_data=${{ secrets.P2S_ROOT_CERT_PUBLIC_DATA }}" \
            -var "image_tag=${{ needs.build_and_push.outputs.image_tag }}"
